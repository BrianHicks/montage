use regex::{Match, Regex, RegexBuilder};
use std::ops::Range;

/// "crunch" a string. That is: make it as short as it can until it reaches the target length.
///
/// This uses an absolutely buckwild string shortening algorithm that tries to take away things
/// that don't mean as much first, growing more and more incoherent the more it has to compress. In
/// other words, it compresses strings like you'd name startups. It works well on strings you
/// already know; maybe not so well on things you're seeing for the first time.
///
/// In order, it will try to:
///
/// 1. Remove words in a short list of stopwords ("the", "in", "and", etc.)
/// 2. Remove double letters from words
/// 3. Remove inner vowels from words
/// 4. Remove inner consonants from words
///
/// If all that fails, it makes one last-ditch attempt to get the string below the target size by
/// converting it to just the initials in the words.
///
/// Some fun examples:
///
/// ```rust
/// use crunch_str::crunch;
///
/// assert_eq!(crunch("bookkeeper", 4), "bkpr");
/// assert_eq!(crunch("how are your metrics?", 10), "ae yr mts?");
/// assert_eq!(crunch("'Twas brillig, and the slithy toves", 20), "'Tws brlg, slthy tvs");
/// assert_eq!(crunch("a very long string with a lot of words", 5), "VLSLW");
/// ```
pub fn crunch(input: &str, target: usize) -> String {
    Cruncher::default().crunch(input, target)
}

struct Cruncher {
    stop_words: Regex,
    double_letters: Regex,
    inner_word_vowels: Regex,
    inner_word_consonants: Regex,
}

impl Cruncher {
    fn crunch(&self, input: &str, target: usize) -> String {
        let mut out = input.to_string();

        if out.len() <= target {
            return out;
        }

        // remove stopwords
        while let Some(stopword_range) = self.first_stopword(&out) {
            out.replace_range(stopword_range, "");

            if out.len() <= target {
                return out;
            }
        }

        // deduplicate double letters
        while let Some(double_match) = self.first_double_letter(&out) {
            assert!(!double_match.is_empty());
            let replacement: String = double_match.as_str().chars().take(1).collect();
            out.replace_range(double_match.range(), &replacement);

            if out.len() <= target {
                return out;
            }
        }

        // remove inner-word vowels
        while let Some(vowel) = self.first_inner_word_vowel(&out) {
            out.replace_range(vowel, "");

            if out.len() <= target {
                return out;
            }
        }

        // remove inner-word consonants
        while let Some(consonant) = self.first_inner_word_consonant(&out) {
            out.replace_range(consonant, "");

            if out.len() <= target {
                return out;
            }
        }

        // last-ditch effort: make an acronym
        let mut initials = String::with_capacity(out.len() / 2);
        for word in out.split(char::is_whitespace) {
            if let Some(chr) = word.chars().next() {
                initials.push(chr.to_ascii_uppercase())
            }
        }

        return initials;
    }

    fn first_stopword(&self, input: &str) -> Option<Range<usize>> {
        self.stop_words.find(input).map(|word| word.range())
    }

    fn first_double_letter<'input>(&self, input: &'input str) -> Option<Match<'input>> {
        self.double_letters.find(input)
    }

    fn first_inner_word_vowel(&self, input: &str) -> Option<Range<usize>> {
        self.inner_word_vowels
            .captures(input)
            .and_then(|captures| captures.get(1))
            .map(|vowel| vowel.range())
    }

    fn first_inner_word_consonant(&self, input: &str) -> Option<Range<usize>> {
        self.inner_word_consonants
            .captures(input)
            .and_then(|captures| captures.get(1))
            .map(|vowel| vowel.range())
    }
}

// List generated by looking at the most common words in my task list! Not representative of all
// English, even a little bit.
static STOP_WORDS: [&str; 25] = [
    "the", "in", "read", "a", "to", "for", "and", "with", "do", "of", "at", "check", "my", "on",
    "what", "up", "i", "how", "look", "is", "get", "this", "about", "could", "by",
];

impl Default for Cruncher {
    fn default() -> Self {
        let pattern = format!(r"\b({})\b\s*", STOP_WORDS.join("|"));

        Cruncher {
            stop_words: RegexBuilder::new(&pattern)
                .case_insensitive(true)
                .build()
                .unwrap(),
            double_letters: RegexBuilder::new(
                r"(aa|bb|cc|dd|ee|ff|gg|hh|ii|jj|kk|ll|mm|nn|oo|pp|qq|rr|ss|tt|uu|vv|ww|xx|yy|zz)",
            )
            .case_insensitive(true)
            .build()
            .unwrap(),
            inner_word_vowels: RegexBuilder::new(r"\b[a-z]+([aeiouy])[a-z]+\b")
                .case_insensitive(true)
                .build()
                .unwrap(),
            inner_word_consonants: RegexBuilder::new(r"\b[a-z]+([bcdfghjklmnpqrstvwxz])[a-z]+\b")
                .case_insensitive(true)
                .build()
                .unwrap(),
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn doesnt_shorten_string_less_than_target_size() {
        let cruncher = Cruncher::default();

        assert_eq!(cruncher.crunch("foo", 30), "foo");
    }

    #[test]
    fn doesnt_shorten_strings_at_target_size() {
        let cruncher = Cruncher::default();

        assert_eq!(cruncher.crunch("foo", 3), "foo");
    }

    #[test]
    fn cannot_find_stop_words_when_there_are_none() {
        let cruncher = Cruncher::default();

        assert_eq!(cruncher.first_stopword("eat five bananas"), None);
    }

    #[test]
    fn finds_first_stopword() {
        let cruncher = Cruncher::default();

        assert_eq!(
            cruncher.first_stopword("the old man and the sea"),
            Some(0..4)
        );
    }

    #[test]
    fn removes_only_as_many_stopwords_as_necessary() {
        let cruncher = Cruncher::default();

        assert_eq!(
            cruncher.crunch("the old man and the sea", 18),
            "old man the sea"
        );
    }

    #[test]
    fn removes_double_letters() {
        let cruncher = Cruncher::default();

        assert_eq!(cruncher.crunch("bookkeepers", 8), "bokepers");
    }

    #[test]
    fn removes_inner_word_vowels() {
        let cruncher = Cruncher::default();

        assert_eq!(cruncher.crunch("band", 3), "bnd");
    }

    #[test]
    fn removes_inner_word_vowels_multiple_times() {
        let cruncher = Cruncher::default();

        assert_eq!(cruncher.crunch("band bundt bound", 12), "bnd bndt bnd");
    }

    #[test]
    fn removes_inner_word_consonants() {
        let cruncher = Cruncher::default();

        assert_eq!(cruncher.crunch("qwerty", 2), "qy");
    }

    #[test]
    fn makes_acronym() {
        let cruncher = Cruncher::default();

        assert_eq!(
            cruncher.crunch(
                "out of the night that covers me, black as the pit from pole to pole",
                11,
            ),
            "ONTCMBAPFPP"
        );
    }
}
